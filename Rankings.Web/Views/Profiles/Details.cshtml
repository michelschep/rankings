@inject IAuthorizationService AuthorizationService
@using Microsoft.AspNetCore.Authorization
@model Rankings.Web.Models.ProfileViewModel

<div>
    <h4>Profile</h4>
    <hr/>
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.EmailAddress)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.EmailAddress)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.DisplayName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.DisplayName)
        </dd>
    </dl>
</div>
<div>
    @if ((await AuthorizationService.AuthorizeAsync(User, Model, "ProfileEditPolicy")).Succeeded)
    {
        @Html.ActionLink("Edit", "Edit", new {id = Model.Id})
    }
</div>

<h3>Game Win% (based on elo score opponents from eternal ranking)</h3>
<div id="my_dataviz"></div>
<script src="https://d3js.org/d3.v4.js"></script>
<script>

    // set the dimensions and margins of the graph
    var margin = { top: 30, right: 30, bottom: 30, left: 30 },
        width = 500 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

// append the svg object to the body of the page
    var svg = d3.select("#my_dataviz")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

// Labels of row and columns
    var myGroups = ["9", "10", "11", "12", "1", "2", "3", "4", "5", "6", "7", "8", ]
    var myVars = ["800", "850", "900", "950", "1000", "1050", "1100", "1150", "1200", "1250", "1300", "1350", "1400", "1450", "1500", "1550",
        "1600", "1650", "1700", "1750", "1800"]

// Build X scales and axis:
    var x = d3.scaleBand()
        .range([0, width])
        .domain(myGroups)
        .padding(0.01);
    svg.append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x))

// Build X scales and axis:
    var y = d3.scaleBand()
        .range([height, 0])
        .domain(myVars)
        .padding(0.01);
    svg.append("g")
        .call(d3.axisLeft(y));

// Build color scale
    var myColor = d3
        //.scaleLinear()
        .scalePow()
        .exponent(0.5)
        .range(["red", "green"])
        //.domain([-100, 100])
        .domain([0, 100])

//Read the data
    d3.json("Stats/PlayerHeatmapData/@ViewBag.Profile",
        function(data) {
            var tooltip = d3.select("#my_dataviz")
                .append("div")
                .style("opacity", 0)
                .attr("class", "tooltip")
                .style("background-color", "white")
                .style("border", "solid")
                .style("border-width", "2px")
                .style("border-radius", "5px")
                .style("padding", "5px");

// Three function that change the tooltip when user hover / move / leave a cell
            var mouseover = function(d) {
                tooltip.style("opacity", 1)
            }
            var mousemove = function(d) {
                tooltip
                    .html("The exact value of<br>this cell is: " + d.value)
                    .style("left", (d3.mouse(this)[0] + 70) + "px")
                    .style("top", (d3.mouse(this)[1]) + "px")
            }
            var mouseleave = function(d) {
                tooltip.style("opacity", 0)
            }


            svg.selectAll()
                .data(data, function(d) { return d.group + ':' + d.variable; })
                .enter()
                .append("rect")
                .attr("x", function(d) { return x(d.group) })
                .attr("y", function(d) { return y(d.variable) })
                .attr("width", x.bandwidth())
                .attr("height", y.bandwidth())
                .style("fill", function(d) { return myColor(d.value) })
                .on("mouseover", mouseover)
                .on("mousemove", mousemove)
                .on("mouseleave", mouseleave);
        })
</script>

<partial name="WinningStreaksTable" for="@Model.Streaks"/>
